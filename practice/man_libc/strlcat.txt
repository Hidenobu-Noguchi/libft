NAME
	strlcat – size-bounded string concatenation

LIBRARY
	Standard C Library (libc, -lc)

SYNOPSIS
	#include <string.h>
	size_t	strlcat(char *restrict dst, const char *restrict src, size_t dstsize);

DESCRIPTION
	The strlcat() function concatenate strings with the same input parameters and output result as [snprintf(3)].
	This is designed to be safer, more consistent, and less error prone replacements for the easily misused function [strncat(3)].

	strlcat() take the full size of the [dst] buffer and guarantee [NULL]-termination if there is room.
	Note that room for the [NULL] should be included in [dstsize].
     
	strlcat() appends string [src] to the end of [dst].
	It will append at most [dstsize (strlen(dst) - 1 characters)].
	It will then [NULL]-terminate, unless [dstsize] is 0 or the original [dst] strings was longer than
	[dstsize]. (in practice this should not happen as it means that either [dstsize] is incorrect or that [dst] is not a proper string).

	If the [src] and [dst] strings overlap, the behavior is undefined.

RETURN VALUES
	Besides quibbles over the return type(size_t VS int) and signal handler safety ([snprintf(3)] is not entirely safe on some systems),
	the following two are equivalent.

		n = strlcat(dst, src, len);
		n = snprintf(dst, len, "%s", src);

	Like [snprintf(3)], strlcat() function returns the total length of the string they tried to create.
	For strlcat() that means the initial length of [dst] plus the length of [src].
	
	If the return value is >= [dstsize], the output string has been trucated.
	It is caller's responsibility to handle this.

EXAMPLES
	The following code fragment illustrates the simple case:

		char	*p, buf[BUF_SIZE];

		(void)strlcat(buf, p, sizeif(buf));

	To detect truncation, perhaps while building a pathname, something like the following might be used:
 
		char	*file, path_name[MAX_PATH_LEN];
           	...

		if (strlcat(path_name, file, sizeof(path_name)) >= sizeof(path_name))
			goto toolong;


	However, one may question the validity of such optimizations, as they defeat the whole purpose of strlcat().
	As a matter of fact, the first version of this manual page got it wrong.

SEE ALSO
	snprintf(3), strncat(3), strncpy(3), wcslcpy(3)
